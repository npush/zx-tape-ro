//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//настройки дисплея
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#define WH1602_RS_PORT    PORTC
#define WH1602_RS_DDR     DDRC
#define WH1602_RS         7

#define WH1602_E_PORT      PORTC
#define WH1602_E_DDR       DDRC
#define WH1602_E           6

#define WH1602_DB7_PORT  PORTC
#define WH1602_DB7_DDR   DDRC
#define WH1602_DB7       2

#define WH1602_DB6_PORT  PORTC
#define WH1602_DB6_DDR   DDRC
#define WH1602_DB6       3

#define WH1602_DB5_PORT  PORTC
#define WH1602_DB5_DDR   DDRC
#define WH1602_DB5       4

#define WH1602_DB4_PORT  PORTC
#define WH1602_DB4_DDR   DDRC
#define WH1602_DB4       5


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//массив перекодировки русских букв
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
const unsigned char RusCodeTable[66][2] PROGMEM=
{
    {'А','A'},
    {'Б',0b10100000},
    {'В','B'},
    {'Г',0b10100001},
    {'Д',0b11100000},
    {'Е','E'},
    {'Ё',0b10100010},
    {'Ж',0b10100011},
    {'З',0b10100100},
    {'И',0b10100101},
    {'Й',0b10100110},
    {'К','K'},
    {'Л',0b10100111},
    {'М','M'},
    {'Н','H'},
    {'О','O'},
    {'П',0b10101000},
    {'Р','P'},
    {'С','C'},
    {'Т','T'},
    {'У',0b10101001},
    {'Ф',0b10101010},
    {'Х','X'},
    {'Ц',0b11100001},
    {'Ч',0b10101011},
    {'Ш',0b10101100},
    {'Щ',0b11100010},
    {'Ъ',0b10101101},
    {'Ы',0b10101110},
    {'Ь','b'},
    {'Э',0b10101111},
    {'Ю',0b10110000},
    {'Я',0b10110001},

    {'а','a'},
    {'б',0b10110010},
    {'в',0b10110011},
    {'г',0b10110100},
    {'д',0b11100011},
    {'е','e'},
    {'ё',0b10110101},
    {'ж',0b10110110},
    {'з',0b10110111},
    {'и',0b10111000},
    {'й',0b10111001},
    {'к',0b10111010},
    {'л',0b10111011},
    {'м',0b10111100},
    {'н',0b10111101},
    {'о','o'},
    {'п',0b10111110},
    {'р','p'},
    {'с','c'},
    {'т',0b10111111},
    {'у','y'},
    {'ф',0b11100100},
    {'х','x'},
    {'ц',0b11100101},
    {'ч',0b11000000},
    {'ш',0b11000001},
    {'щ',0b11100110},
    {'ъ',0b11000010},
    {'ы',0b11000011},
    {'ь',0b11000100},
    {'э',0b11000101},
    {'ю',0b11000110},
    {'я',0b11000111}
};

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//настройки дисплея
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

void WH1602_Init(void);//инициализация дисплея
void WH1602_SendNibble(unsigned char nibble);//послать ниббл
void WH1602_SendData(unsigned char byte);//послать данные
void WH1602_SendCommand(unsigned char byte);//послать команду
void WH1602_SetTextUpLine(char *text);//записать текст в верхнюю строчку экрана
void WH1602_SetTextDownLine(char *text);//записать текст в нижнюю строчку экрана
void WH1602_SetTextProgmemUpLine(const char *text);//записать текст из памяти в верхнюю строчку экрана
void WH1602_SetTextProgmemDownLine(const char *text);//записать текст из памяти в нижнюю строчку экрана

//----------------------------------------------------------------------------------------------------
//инициализация дисплея
//----------------------------------------------------------------------------------------------------
void WH1602_Init(void)
{
//настроим порты
    WH1602_RS_DDR|=(1<<WH1602_RS);
    WH1602_E_DDR|=(1<<WH1602_E);
    WH1602_DB7_DDR|=(1<<WH1602_DB7);
    WH1602_DB6_DDR|=(1<<WH1602_DB6);
    WH1602_DB5_DDR|=(1<<WH1602_DB5);
    WH1602_DB4_DDR|=(1<<WH1602_DB4);
    _delay_ms(20);//ждём включения экрана
//запускаем дисплей
//даём несколько раз команду включения
    WH1602_RS_PORT&=0xff^(1<<WH1602_RS);//запись команд
    WH1602_SendNibble(0b0011);//команда включения
    _delay_ms(5);
    WH1602_SendNibble(0b0011);//команда включения
    _delay_us(200);
    WH1602_SendNibble(0b0011);//команда включения
    WH1602_SendNibble(0b0010);//интерфейс 4 бит
//указываем режим 4 бита, 2 линии, символы 5x11
    WH1602_SendCommand(0b00101100);
    _delay_ms(1);
//отключаем экран
    WH1602_SendCommand(0b00001000);
    _delay_ms(1);
//очищаем экран
    WH1602_SendCommand(0b00000001);
    _delay_ms(1);
//устанавливаем режим ввода данных с инкрементом ячейки памяти
    WH1602_SendCommand(0b00000110);
//включаем экран
    WH1602_SendCommand(0b00001100);
    _delay_ms(1);
}
//----------------------------------------------------------------------------------------------------
//послать ниббл
//----------------------------------------------------------------------------------------------------
void WH1602_SendNibble(unsigned char nibble)
{
    WH1602_DB7_PORT&=0xff^(1<<WH1602_DB7);
    WH1602_DB6_PORT&=0xff^(1<<WH1602_DB6);
    WH1602_DB5_PORT&=0xff^(1<<WH1602_DB5);
    WH1602_DB4_PORT&=0xff^(1<<WH1602_DB4);
    WH1602_E_PORT|=(1<<WH1602_E);
    WH1602_DB7_PORT|=(((nibble>>3)&0x01)<<WH1602_DB7);
    WH1602_DB6_PORT|=(((nibble>>2)&0x01)<<WH1602_DB6);
    WH1602_DB5_PORT|=(((nibble>>1)&0x01)<<WH1602_DB5);
    WH1602_DB4_PORT|=(((nibble>>0)&0x01)<<WH1602_DB4);
    _delay_us(100);
    WH1602_E_PORT&=0xff^(1<<WH1602_E);
    _delay_us(100);
}
//----------------------------------------------------------------------------------------------------
//послать данные
//----------------------------------------------------------------------------------------------------
void WH1602_SendData(unsigned char byte)
{
    WH1602_RS_PORT|=1<<WH1602_RS;//запись данных
    WH1602_SendNibble(byte>>4);
    WH1602_SendNibble(byte&0x0f);
}
//----------------------------------------------------------------------------------------------------
//послать команду
//----------------------------------------------------------------------------------------------------
void WH1602_SendCommand(unsigned char byte)
{
    WH1602_RS_PORT&=0xff^(1<<WH1602_RS);//запись команд
    WH1602_SendNibble(byte>>4);
    WH1602_SendNibble(byte&0x0f);
}
//----------------------------------------------------------------------------------------------------
//записать текст в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextUpLine(char *text)
{
//даём команду позиционирования
    WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
    _delay_us(100);
//преобразуем русские буквы
    unsigned char n;
    unsigned char out_text[16];
    for(n=0; n<16; n++)
    {
        unsigned char b=text[n];
        out_text[n]=b;
        for(unsigned char m=0; m<66; m++)
        {
            unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
            if (t==b)
            {
                out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
                break;
            }
        }
    }
    for(n=0; n<16; n++)
    {
        if (text[n]==0) break;
        WH1602_SendData(out_text[n]);
    }
    for(; n<16; n++) WH1602_SendData(32); //заполняем пробелами
}
//----------------------------------------------------------------------------------------------------
//записать текст в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextDownLine(char *text)
{
//даём команду позиционирования
    WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
    _delay_us(100);
//преобразуем русские буквы
    unsigned char n;
    unsigned char out_text[16];
    for(n=0; n<16; n++)
    {
        unsigned char b=text[n];
        out_text[n]=b;
        for(unsigned char m=0; m<66; m++)
        {
            unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
            if (t==b)
            {
                out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
                break;
            }
        }
    }
    for(n=0; n<16; n++)
    {
        if (text[n]==0) break;
        WH1602_SendData(out_text[n]);
    }
    for(; n<16; n++) WH1602_SendData(32); //заполняем пробелами
}
//----------------------------------------------------------------------------------------------------
//записать текст из памяти в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextProgmemUpLine(const char *text)
{
//даём команду позиционирования
    WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
    _delay_us(100);
//преобразуем русские буквы
    unsigned char n;
    unsigned char out_text[16];
    for(n=0; n<16; n++)
    {
        unsigned char b=pgm_read_byte(&text[n]);
        out_text[n]=b;
        for(unsigned char m=0; m<66; m++)
        {
            unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
            if (t==b)
            {
                out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
                break;
            }
        }
    }
    for(n=0; n<16; n++)
    {
        if (pgm_read_byte(&text[n])==0) break;
        WH1602_SendData(out_text[n]);
    }
    for(; n<16; n++) WH1602_SendData(32); //заполняем пробелами
}
//----------------------------------------------------------------------------------------------------
//записать текст из памяти  в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextProgmemDownLine(const char *text)
{
//даём команду позиционирования
    WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
    _delay_us(100);
//преобразуем русские буквы
    unsigned char n;
    unsigned char out_text[16];
    for(n=0; n<16; n++)
    {
        unsigned char b=pgm_read_byte(&text[n]);
        out_text[n]=b;
        for(unsigned char m=0; m<66; m++)
        {
            unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
            if (t==b)
            {
                out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
                break;
            }
        }
    }
    for(n=0; n<16; n++)
    {
        if (pgm_read_byte(&text[n])==0) break;
        WH1602_SendData(out_text[n]);
    }
    for(; n<16; n++) WH1602_SendData(32); //заполняем пробелами
}
